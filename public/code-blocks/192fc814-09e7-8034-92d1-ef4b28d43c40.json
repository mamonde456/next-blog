[
  {
    "lang": "typescript",
    "code": "onClick={()=> handleClick(item)}\n// 위처럼 사용!\n// map으로 출력하는 item 매개변수를 받기 위해서 ()=> 익명 함수를 열고 \n// handleClick(item) 콜백함수로 변수를 받는다.\n\n\nonClick={handleClick(item)}\n// 바로 실행됨!\n// handleClick() 콜백 함수를 호출하는 ()가 있어서 바로 실행됨.\n"
  },
  {
    "lang": "typescript",
    "code": "onClick={() => fn()}\n// 본 게시글에서는 위와 같은 사용법을 인라인 익명 콜백 함수라 부를 예정이다.\n// 정확히 어떤 명칭을 써야하는지 모르겠음.\n\nonClick={fn}\n// 위의 함수 사용은 일반적인 콜백 함수라 지칭하겠다.\n"
  },
  {
    "lang": "javascript",
    "code": "function MyComponent() {\n  function handleClick() {\n    console.log(\"Button clicked!\");\n  }\n\n  return <button onClick={handleClick}>Click Me</button>;\n}\n"
  },
  {
    "lang": "javascript",
    "code": "function MyComponent() {\n  return <button onClick={() => console.log(\"Button clicked!\")}>Click Me</button>;\n}\n"
  },
  {
    "lang": "typescript",
    "code": "import React, { useState, useCallback } from \"react\";\n\nconst Counter = () => {\n  const [count, setCount] = useState(0);\n  \n  const handleClick = () =>  { setCount((prev) => prev + 1) }\n  // useCallback이 없다면 간단히 끝남\n\n  const handleClick = useCallback(() => {\n    setCount((prev) => prev + 1);\n  }, []); // 불필요한 종속성과 성급한 최적화\n\n  return <button onClick={handleClick}>Increment</button>;\n};\n"
  },
  {
    "lang": "typescript",
    "code": "import React, { useState, useMemo } from \"react\";\n\nconst App = () => {\n  const [count, setCount] = useState(0);\n\n  const computedValue = useMemo(() => {\n    return count * 2; \n  }, [count]); // 불필요한 useMemo 사용\n\n  return (\n    <div>\n      <p>Computed Value: {computedValue}</p>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </div>\n  );\n};\n"
  },
  {
    "lang": "typescript",
    "code": "import React, { useState, useMemo } from \"react\";\n\nconst list = [\"변하지\",\"않는\",\"배열\"];\n// 2. 이렇게 사용하는 편이 연산 비용없이 효율적일 수도 있다.\n\nconst App = () => {\n  const list = useMemo(() => [\"변하지\",\"않는\",\"배열\"], []);\n  // 1. 이렇게 사용할 수도 있으나...\n\n  return (\n    <div>\n      <p>Computed Value: {computedValue}</p>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </div>\n  );\n};\n"
  },
  {
    "lang": "typescript",
    "code": "function Foo({ bar, baz }) {\n  const options = { bar, baz };\n  React.useEffect(() => {\n    buzz(options);\n  }, [options]); // we want this to re-run if bar or baz change\n  return <div>foobar</div>;\n}\n\nfunction Blub() {\n  return <Foo bar=\"bar value\" baz={3} />;\n}\n"
  },
  {
    "lang": "typescript",
    "code": "// option 1\nfunction Foo({ bar, baz }) {\n  React.useEffect(() => {\n    const options = { bar, baz };\n    buzz(options);\n  }, [bar, baz]); // we want this to re-run if bar or baz change\n  return <div>foobar</div>;\n}\n"
  },
  {
    "lang": "typescript",
    "code": "function Foo({ bar, baz }) {\n  React.useEffect(() => {\n    const options = { bar, baz };\n    buzz(options);\n  }, [bar, baz]);\n  return <div>foobar</div>;\n}\n\nfunction Blub() {\n  const bar = React.useCallback(() => {}, []);\n  const baz = React.useMemo(() => [1, 2, 3], []);\n  return <Foo bar={bar} baz={baz} />;\n}\n"
  },
  {
    "lang": "typescript",
    "code": "function CountButton({ onClick, count }) {\n  return <button onClick={onClick}>{count}</button>;\n}\n\nfunction DualCounter() {\n  const [count1, setCount1] = React.useState(0);\n  const increment1 = () => setCount1((c) => c + 1);\n  const [count2, setCount2] = React.useState(0);\n  const increment2 = () => setCount2((c) => c + 1);\n  return (\n    <>\n      <CountButton count={count1} onClick={increment1} />\n      <CountButton count={count2} onClick={increment2} />\n    </>\n  );\n}\n"
  },
  {
    "lang": "typescript",
    "code": "const CountButton = React.memo(function CountButton({onClick, count}) {\n    return <button onClick={onClick}>{count}</button>\n  })\n\n  function DualCounter() {\n    const [count1, setCount1] = React.useState(0)\n    const increment1 = React.useCallback(() => setCount1(c => c + 1), [])\n    const [count2, setCount2] = React.useState(0)\n    const increment2 = React.useCallback(() => setCount2(c => c + 1), [])\n    return (\n      <>\n        <CountButton count={count1} onClick={increment1} />\n        <CountButton count={count2} onClick={increment2} />\n      </>\n    )\n"
  },
  {
    "lang": "typescript",
    "code": "// 함수형 컴포넌트\nimport React, { memo } from \"react\";\n\n// ❌ 일반 컴포넌트\nconst ComponentB = (props) => {\n  return <div>{props.propB}</div>;\n};\n\n// ✅ memo 적용 (성능 최적화)\nconst ComponentB = React.memo((props) => {\n  return <div>{props.propB}</div>;\n});\n\n\n// 클래스형 컴포넌트\nimport React, { Component, PureComponent } from \"react\";\n\n// ❌ 일반 클래스 컴포넌트\nclass ComponentB extends Component {\n  render() {\n    return <div>{this.props.propB}</div>;\n  }\n}\n\n// ✅ PureComponent 적용 (성능 최적화)\nclass ComponentB extends PureComponent {\n  render() {\n    return <div>{this.props.propB}</div>;\n  }\n}\n"
  },
  {
    "lang": "typescript",
    "code": "// useCallback\nimport React, { useCallback } from \"react\";\n\nfunction MyComponent() {\n  const handleClick = useCallback(() => {\n    console.log(\"Button clicked!\");\n  }, []); // 의존성 배열이 비어 있으므로, 처음 생성된 함수 객체를 재사용함.\n\n  return <button onClick={handleClick}>Click me</button>;\n}\n\n// useMemo\nimport React, { useMemo } from \"react\";\n\nfunction MyComponent({ num }) {\n  const result = useMemo(() => {\n    console.log(\"Calculating...\");\n    return num * 2; // num이 변경될 때만 계산됨.\n  }, [num]); // num이 변경될 때만 계산을 다시 실행\n\n  return <div>Result: {result}</div>;\n}\n"
  },
  {
    "lang": "javascript",
    "code": "<button onClick={handleClick}>Click</button> // 기본적인 사용\n\n<button onClick={() => handleClick(item.id)}>Click</button> // 매개변수 전달이 필요할 때\n"
  },
  {
    "lang": "javascript",
    "code": "    const generateLargeArray = () => {\n        return new Array(1000000).fill('test'); // 100만 개의 문자열 배열 생성\n      };\n    \n      // 1️⃣ 네이밍된 콜백 함수\n      const handleClick = () => {\n        console.log('콜백 함수 실행');\n        const data = generateLargeArray();\n        console.log(`데이터 크기: ${data.length}`);\n      };\n    \n      // 2️⃣ 인라인 익명 함수 (onClick={()=> handleClickHighOrder()})\n      const handleClickInline = () => {\n        console.log('콜백 함수 실행');\n        const data = generateLargeArray();\n        console.log(`데이터 크기: ${data.length}`);\n      };\n    \n      // 3️⃣ 고차 함수 (onClick={handleClickHighOrder()})\n      const handleClickHighOrder = () => () => {\n        console.log('고차 함수 실행');\n        const data = generateLargeArray();\n        console.log(`데이터 크기: ${data.length}`);\n      };\n    \n      // 4️⃣ `useCallback`으로 최적화된 콜백 함수\n      const handleClickUseCallback = useCallback(() => {\n        console.log('useCallback 함수 실행');\n        const data = generateLargeArray();\n        console.log(`데이터 크기: ${data.length}`);\n      }, []);\n    \n      \n      // ✅ (메모리 체크)\n      const checkMemoryUsage = () => {\n        if (window.performance && window.performance.memory) {\n          console.log('🧠 현재 메모리 상태:', window.performance.memory);\n        }\n      };\n    \n      return (\n        <div>\n          {/* 1️⃣ 일반 콜백 함수 */}\n          <button onClick={handleClick}>콜백 함수</button>\n          <br />\n    \n          {/* 2️⃣ 인라인 익명 함수 */}\n          <button onClick={() => handleClickInline()}>인라인 익명 콜백 함수</button>\n          <br />\n    \n          {/* 3️⃣ 고차 함수 */}\n          <button onClick={handleClickHighOrder()}>고차 함수</button>\n          <br />\n    \n          {/* 4️⃣ useCallback 최적화 */}\n          <button onClick={handleClickUseCallback}>useCallback 함수</button>\n          <br />\n          <button\n            onClick={() => {\n              console.log('()=> {} 인라인 익명 함수');\n              const data = generateLargeArray();\n              console.log(`데이터 크기: ${data.length}`);\n              return;\n            }}\n          >\n            인라인 익명 함수\n          </button>\n          <br />\n    \n          {/* ✅ 메모리 사용량 체크 */}\n          <button onClick={checkMemoryUsage}>메모리 체크</button>\n          <br />\n        </div>\n      );\n    };\n    "
  },
  {
    "lang": "typescript",
    "code": "    // 누르기 전\n    jsHeapSizeLimit: 4294705152 // 약 4GB\n    totalJSHeapSize: 7083405 // 약 6.75MB\n    usedJSHeapSize: 5524981 // 약 5.27MB\n    3,187 KB\n    \n    // 5번 누른 후\n    jsHeapSizeLimit: 4294705152 // 약 4GB\n    totalJSHeapSize: 11113885 // 약 \t10.60 MB  = 3.85 증가\n    usedJSHeapSize: 9651361 // 약 9.20 MB = 3.93 증가\n    3,293 KB\n    \n    //= 106 KB 차이\n    "
  },
  {
    "lang": "typescript",
    "code": "    // 누르기 전\n    jsHeapSizeLimit: 4294705152\n    totalJSHeapSize: 7343403 // 약 7.00 MB\n    usedJSHeapSize: 5560751 // 약 \t5.30 MB\n    3,062 KB\n    \n    // 5번 누른 후\n    jsHeapSizeLimit: 4294705152\n    totalJSHeapSize: 11636043 // 약 \t11.09 MB  = 4.09 증가\n    usedJSHeapSize: 9624039 // 약 \t9.18 MB  = 3.88 증가\n    3,196 KB\n    \n    // = 134 KB 차이\n    "
  },
  {
    "lang": "typescript",
    "code": "    // 누르기 전\n    jsHeapSizeLimit: 4294705152\n    totalJSHeapSize: 7228797 // 약 6.89 MB\n    usedJSHeapSize: 5775961 // 약 5.51 MB\n    3,109 KB\n    \n    // 5번 누른 후\n    jsHeapSizeLimit: 4294705152\n    totalJSHeapSize: 6036679 // 약 5.76 MB  = 1.13 감소\n    usedJSHeapSize: 5067611 // 약 4.83 MB = 0.68 감소\n    3,212 KB\n    \n    // = 103 KB 차이\n    "
  },
  {
    "lang": "typescript",
    "code": "    // 누르기 전\n    jsHeapSizeLimit: 4294705152\n    totalJSHeapSize: 6314405 // 약 6.02 MB\n    usedJSHeapSize: 5581477 // 약 5.32 MB\n    2,941 KB\n    \n    // 5번 누른 후\n    jsHeapSizeLimit: 4294705152\n    totalJSHeapSize: 10312935 // 약 9.84 MB  = 3.82 증가\n    usedJSHeapSize: 9095279 // 약 \t8.67 MB  = 3.35 증가\n    3,033 KB\n    \n    // = 92 KB 차이\n    "
  },
  {
    "lang": "typescript",
    "code": "    // 누르기 전\n    jsHeapSizeLimit: 4294705152\n    totalJSHeapSize: 7377782 // 약 7.03 MB\n    usedJSHeapSize: 5876770 // 약 5.61 MB\n    3,109 KB\n    \n    // 5번 누른 후\n    jsHeapSizeLimit: 4294705152 \n    totalJSHeapSize: 11637638 // 약 11.10 MB  = 4.07 증가\n    usedJSHeapSize: 9510450 // 약 \t9.07 MB  = 3.46 증가\n    3,211 KB\n    \n    // = 102 KB 차이\n    "
  },
  {
    "lang": "typescript",
    "code": "const handleClick = () => () => console.log(\"click me!\")\n\n<button onClick={handleClick()}>click!</button>\n"
  },
  {
    "lang": "typescript",
    "code": "const handleClick = useCallback((item) => {\n    console.log(\"Clicked item:\", item);\n  }, []);\n  \n<button onClick={()=> handleClick(item)}>click!</button>\n// 그렇지만, useCallback을 사용해야 할 만큼 메모리 연산이 큰 로직일지에 대한 고려가 필요하다...\n"
  },
  {
    "lang": "typescript",
    "code": "const handleClick = (item) => () => {\n\t console.log(\"Clicked item:\", item);\n }\n  \n<button onClick={handleClick(item)}>click!</button>\n// 어쨌든 handleClick(item) 호출하게 되면 내부 함수는 익명 함수이지만...\n// 메모리 사용이 적기 때문에 합리적인 사용일 것 같다.\n"
  },
  {
    "lang": "typescript",
    "code": "const handleClick = (item) => {\n\t console.log(\"Clicked item:\", item);\n }\n  \n<button onClick={handleClick.bind(null, item)}>click!</button>\n// 괜찮아보이지만, 다른 개발자들로부터 왜 이렇게 했는지 질문을 받게 될 것도 같음...\n"
  },
  {
    "lang": "javascript",
    "code": "// props에 바로 객체를 생성하여 전달\n<Components props={{name:\"kim\"}}/>\n\n<ComponentB style={{ color: \"blue\", background: \"gold\" }} />\n\n// 객체를 별도로 저장하여 props로 전달\nconst name = { name:\"kim\"};\nconst myStyle = { color: \"blue\", background: \"gold\" };\n\n<Components props={name}/>\n<ComponentB style={myStyle} />\n"
  },
  {
    "lang": "typescript",
    "code": "import React, { lazy, Suspense } from \"react\";\nconst BlogPosts = lazy(() => import(\"./BlogPosts\"));\n\nfunction MyBlog() {\n  return (\n    <div>\n      <Suspense fallback={<div>Loading...</div>}>\n        <BlogPosts />\n      </Suspense>\n    </div>\n  );\n}\n"
  }
]